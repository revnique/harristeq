function makeid()
{
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for( var i=0; i < 5; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}
  //$scope.$watch('selectedCode', function (newValue, oldValue) {

            //    console.log('selectedCode Changed');

            //    console.log('selectedCode Changed new', newValue);

            //    console.log('selectedCode Changed old', oldValue);


            //});

.optional-fee-header:after {
	clear: both;
	content: "";
	display: table;
}



        svc.parseQueryString = function (queryString) {
            if (queryString == null) {
                queryString = window.location.search;
                queryString = queryString.substring(1);
            }


            var params = {}, queries, temp, i, l;

            // Split into key/value pairs
            queries = queryString.split("&");

            // Convert the array of strings into an object
            for (i = 0, l = queries.length; i < l; i++) {
                temp = queries[i].split('=');
                params[temp[0]] = temp[1];
            }

            return params;
        };

    
                                    <style>
                                        .circle-next, .circle-next:visited {
                                            border-radius: 20px;
                                            background-color: #990000;
                                            color: #fff;
                                            padding: 10px;
                                            vertical-align: middle;
                                            text-align: center;
                                            font-weight: bold;
                                            cursor: pointer;
                                            display: block;
                                            text-decoration: none;
                                        }
                                            .circle-next:hover {
                                                color: #fff;
                                                opacity: .7;
                                                text-decoration: none;
                                            }
                                    </style>
                                    <a href="#" class="circle-next">></a>




    var regexIso8601 = /^(\d{4}|\+\d{6})(?:-(\d{2})(?:-(\d{2})(?:T(\d{2}):(\d{2}):(\d{2})\.(\d{1,})(Z|([\-+])(\d{2}):(\d{2}))?)?)?)?$/;

    function convertDateStringsToDates(input) {
        // Ignore things that aren't objects.
        if (typeof input !== "object") return input;

        for (var key in input) {
            if (!input.hasOwnProperty(key)) continue;

            var value = input[key];
            var match;
            // Check for string properties which look like dates.
            if (typeof value === "string" && (match = value.match(regexIso8601))) {
                var milliseconds = Date.parse(match[0]);
                if (!isNaN(milliseconds)) {
                    input[key] = new Date(milliseconds);
                }
            } else if (typeof value === "object") {
                // Recurse into object
                convertDateStringsToDates(value);
            }
        }
    };

Date.prototype.addMinutes = function (m) {
    this.setMinutes(this.getMinutes() + m);
    return this;
}
Date.prototype.addHours = function (h) {
    this.setHours(this.getHours() + h);
    return this;
}



        [Route("api/InboundFiles/All/{startDate}/{endDate}")]
        public object GetAllInboundFilesInRange(string startDate, string endDate)
        {
            
            var cmd = SqlHelper.GetSqlCommand(SqlHelper.Databases.Finance);
            cmd.CommandText = string.Format(@"SELECT f.* FROM Finance.FileProcessing.InboundFile f
                                JOIN Finance.FileProcessing.InboundFileActivity a 
                                ON a.InboundFileId = f.InboundFileId
                                WHERE a.ActivityTypeCode='IMPORT_SUCCESS'
                                AND f.CreatedDate BETWEEN convert(datetime,'{0}') AND convert(datetime,'{1}')", 
                                 startDate.Replace("-", "/"), endDate.Replace("-", "/"));
            return SqlHelper.ExecuteList(cmd);
        }


commons.directive('formButtonValidation', function () {
    // Description:
    //  Button that diables and enables based on form validation
    // Usage:
    //  <formButtonValidation clicked="controllerMethod" form="formName" value="buttonValue"></div>
 
    var directive = {
        link: link,
        restrict: 'E',
        transclude: true,
        scope: {
            clicked: '@',
            form: '@',
            value: '@'
        },
        template: '<input type="{{clicked}}" class="btn greenbtn bold lightgraybtn" value="{{value}}" ng-disabled="invalid" ng-class="{ greybtn : invalid }" />'
    };
    return directive; 


























